name: Build OpenSSL for macOS (arm64 + Intel)

inputs:
  version:
    default: 1.1.1m
  sha256sum:
    default: f89199be8b23ca45fc7cb9f1d8d3ee67312318286ad030f5316aca6462db6c96
  build_dir:
    default: ${{ github.workspace }}/../openssl-universal
  prefix:
    default: /usr/local/openssl

runs:
  using: "composite"
  steps:
    - name: Download OpenSSL
      shell: bash
      run: |
        curl "https://www.openssl.org/source/openssl-${{ inputs.version }}.tar.gz" -o openssl-${{ inputs.version }}.tar.gz
        echo "${{ inputs.sha256sum }}  openssl-${{ inputs.version }}.tar.gz" > checksum
        shasum -a 256 -c checksum
        tar xf openssl-${{ inputs.version }}.tar.gz

    - uses: actions/cache@v3
      id: cache-arm64
      with:
        path: ${{ inputs.build_dir }}/arm64
        key: ${{ runner.os }}-arm64-${{ inputs.sha256sum }}

    - name: Build OpenSSL on arm64
      if: steps.cache-arm64.outputs.cache-hit != 'true'
      shell: bash
      run: |
        cp -r openssl-${{ inputs.version }} arm64
        cd arm64
        perl Configure darwin64-arm64-cc no-idea no-mdc2 no-rc5 no-zlib no-ssl3 shared --prefix=${{ inputs.prefix }} --openssldir=/private/etc/ssl
        make depend
        make all -j
        make install_sw DESTDIR=${{ inputs.build_dir }}/arm64

    - uses: actions/cache@v3
      id: cache-x86_64
      with:
        path: ${{ inputs.build_dir }}/x86_64
        key: ${{ runner.os }}-x86_64-${{ inputs.sha256sum }}

    - name: Build OpenSSL on x86_64
      if: steps.cache-x86_64.outputs.cache-hit != 'true'
      shell: bash
      run: |
        cp -r openssl-${{ inputs.version }} x86_64
        cd x86_64
        perl Configure darwin64-x86_64-cc enable-ec_nistp_64_gcc_128 no-idea no-mdc2 no-rc5 no-zlib no-ssl3 shared --prefix=${{ inputs.prefix }} --openssldir=/private/etc/ssl
        make depend
        make all -j
        make install_sw DESTDIR=${{ inputs.build_dir }}/x86_64
    - name: Create fat binary
      shell: bash
      run: |
        mkdir -p ${{ inputs.build_dir }}/lib
        pushd ${{ inputs.build_dir }}
        for libname in libssl.1.1.dylib libcrypto.1.1.dylib; do
          lipo -create -output lib/$libname  arm64/${{  inputs.prefix  }}/lib/$libname  x86_64/${{  inputs.prefix  }}/lib/$libname
        done
        ln -s libssl.1.1.dylib lib/libssl.dylib
        ln -s libcrypto.1.1.dylib lib/libcrypto.dylib
        mv arm64/${{ inputs.prefix }}/include/ include/
        rm -r arm64 x86_64
        mkdir -p ${{ inputs.prefix  }}
        cp -r ${{ inputs.build_dir }}/ ${{ inputs.prefix }}
        popd
        tar czf ${{ runner.temp }}/openssl-universal.tar.gz -C ${{ inputs.build_dir }} .
    - uses: actions/upload-artifact@v3
      with:
        name: openssl-universal.tar.gz
        path: ${{ runner.temp }}/openssl-universal.tar.gz
